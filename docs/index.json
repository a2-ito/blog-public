[{"content":"前回の記事で記載した通り、ブログソース（mdたち）の private リポジトリ化について紹介します。\n以下の仕様で実装します。\n privateリポジトリに記事をpushする github actions で public リポジトリに docs のみdeployする  前提  blog -\u0026gt; privateリポジトリ。md形式のブログソースデータを管理します。 blog-public -\u0026gt; publicリポジトリ。こちらでgithub pages を公開します。  準備 sshキーペアの作成 まずは、privateからpublic側へactions で push できるよう、キーペアを作成します。\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34;  gh-pages.pub gh-pages  の２ファイルが生成されていると思います。-fで指定するキーファイル名は何でもいいです。\nblog-private側へ公開鍵を登録 blog-privateリポジトリへ移動します。 Setting -\u0026gt; Deploy keys から Add deploy key を選択して、公開鍵をペーストします。 鍵の名前はなんでもいいです。\nblog側へ秘密鍵を登録 blog側のリポジトリへ移動します。 Setting -\u0026gt; Actions から New repository secret を選択して、秘密鍵をペーストします。 鍵の名前はなんでもいいですが、後述の Github Actions 上で指定する必要あるので、特に要件がなければACTIONS_DEPLOY_KEYでいいでしょう。\ngithub に登録後、ローカル上のキーペアは破棄してOKです。\ngithub actions を登録 こちらのテンプレートほぼそのままですが、exclude_assets がポイントで、ここで指定されたファイル・ディレクトリは除外されます。僕の設定では、docsディレクトリへ build 済み Hugo データを配置して公開しているので、docs以外を列挙します。ディレクトリはファイル名と同じように名前だけで指定すれば認識してくれます。\nexclude_assets: \u0026#39;.github,themes,static,resources,content,layouts,archetypes,config.yml,.gitmodules,.hugo_build.lock,README.md\u0026#39; また、Deployが走る度にcnameの設定が初期化されるため、actionsの中で設定しておきます。\ncname: a2ito.ml あとはexternal_repository をblog-publicに指定して、blogへ push します。\nactions全量を載せておきます。\nvi .github/workflows/gh_pages.yml name: GitHub Pages  on:  push:  branches:  - main  # Set a branch name to trigger deployment  pull_request:  jobs:  deploy:  runs-on: ubuntu-20.04  concurrency:  group: ${{ github.workflow }}-${{ github.ref }}  steps:  - uses: actions/checkout@v3  with:  submodules: true # Fetch Hugo themes (true OR recursive)  fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo  uses: peaceiris/actions-hugo@v2  with:  hugo-version: \u0026#39;0.96.0\u0026#39;   - name: Build  run: hugo --minify   - name: Deploy  uses: peaceiris/actions-gh-pages@v3  if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }}  with:  deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}  external_repository: a2-ito/blog-public  publish_branch: main  publish_dir: .  exclude_assets: \u0026#39;.github,themes,static,resources,content,layouts,archetypes,config.yml,.gitmodules,.hugo_build.lock,README.md\u0026#39;  cname: a2ito.ml 2022/4/6 追記 cname がうまく効いていない状況を確認しました。blog-publicに対してcnameを設定してほしいのですが、設定されていません。今時点では custom domain について都度手動での初期化が必要のようです。もしかしたらexternal_repsitoryとの組み合わせでは利用できない可能性があるので、回避策を考えます。\n2022/4/7 追記 回避策の対応が完了しました。基本的な考え方は、actions-gh-pagesを使わずに、公開対象のディレクトリだけ普通に push する、という愚直な方法にしています。他の良いやり方があるかどうかはわかりません。。。\nactions における Deploy の箇所を以下に置き換えました。\n - name: Setup ssh key  env:  GITHUB_IO_REPO_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}  run: |echo \u0026#34;$GITHUB_IO_REPO_DEPLOY_KEY\u0026#34; \u0026gt; ~/deploy_key.pem chmod 600 ~/deploy_key.pem ls -ltr ~/deploy_key.pem   - name: Deploy pages  env:  GIT_SSH_COMMAND: ssh -i ~/deploy_key.pem -o StrictHostKeyChecking=no -F /dev/null  run: |#origin=https://a2-ito:${ACTIONS_DEPLOY_KEY}@github.com/a2-ito/blog-public.git git clone https://github.com/a2-ito/blog-public.git ls -ltr cd blog-public cp -pr ../docs . git config --global user.email \u0026#34;a2-ito@github.io\u0026#34; git config --global user.name \u0026#34;a2-ito\u0026#34; git config remote.origin.url \u0026#34;git@github.com:a2-ito/blog-public.git\u0026#34; git add ./docs git commit -m \u0026#34;Deploy $GITHUB_SHA by GitHub Actions\u0026#34; git push origin main 参考にさせて頂いたサイト https://3nan3.github.io/post/2019122201_github_actions/\n終わりに なんか得した気分。githubさんいつもありがとうございます。\n","permalink":"https://a2ito.ml/posts/20220405-post/","summary":"前回の記事で記載した通り、ブログソース（mdたち）の private リポジトリ化について紹介します。\n以下の仕様で実装します。\n privateリポジトリに記事をpushする github actions で public リポジトリに docs のみdeployする  前提  blog -\u0026gt; privateリポジトリ。md形式のブログソースデータを管理します。 blog-public -\u0026gt; publicリポジトリ。こちらでgithub pages を公開します。  準備 sshキーペアの作成 まずは、privateからpublic側へactions で push できるよう、キーペアを作成します。\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34;  gh-pages.pub gh-pages  の２ファイルが生成されていると思います。-fで指定するキーファイル名は何でもいいです。\nblog-private側へ公開鍵を登録 blog-privateリポジトリへ移動します。 Setting -\u0026gt; Deploy keys から Add deploy key を選択して、公開鍵をペーストします。 鍵の名前はなんでもいいです。\nblog側へ秘密鍵を登録 blog側のリポジトリへ移動します。 Setting -\u0026gt; Actions から New repository secret を選択して、秘密鍵をペーストします。 鍵の名前はなんでもいいですが、後述の Github Actions 上で指定する必要あるので、特に要件がなければACTIONS_DEPLOY_KEYでいいでしょう。","title":"privateリポジトリでブログを書いてpublicリポジトリでブログを公開する方法"},{"content":"本サイトについて 本サイトはIT技術（特にインフラ系）の情報発信をしていきたいサイトです。\n github pages hugo freenom  を利用しています。\nアクセス解析について 本サイトでは、Googleアナリティクスを利用してアクセス解析を行っております。 トラフィックデータは匿名で収集されており、個人を特定するものではありません。ブラウザ上で Cookie を無効化することで収集できないようにすることも可能です。もしご希望の方は、お使いのブラウザ設定をご確認ください。詳しくはこちらをご覧ください。\n","permalink":"https://a2ito.ml/posts/about/","summary":"本サイトについて 本サイトはIT技術（特にインフラ系）の情報発信をしていきたいサイトです。\n github pages hugo freenom  を利用しています。\nアクセス解析について 本サイトでは、Googleアナリティクスを利用してアクセス解析を行っております。 トラフィックデータは匿名で収集されており、個人を特定するものではありません。ブラウザ上で Cookie を無効化することで収集できないようにすることも可能です。もしご希望の方は、お使いのブラウザ設定をご確認ください。詳しくはこちらをご覧ください。","title":"About"},{"content":"Summary ようこそ！ 某SIerでインフラエンジニアをやっています。\nIT技術関連の色々なトピックを書いてみる予定です。多分インフラ関連やプログラミング関連が多くなるかもしれません。\n本サイトは github pages で運用しています。\nQualifications  そのうち書きます  Work Experience  そのうち書きます  Certificates  Google Cloud 全部(Cloud Architectなど、全部取りました) Kubernetes系(CKA,CKAD) IPAいくつか  Education  そのうち書きます  ","permalink":"https://a2ito.ml/posts/profile/","summary":"Summary ようこそ！ 某SIerでインフラエンジニアをやっています。\nIT技術関連の色々なトピックを書いてみる予定です。多分インフラ関連やプログラミング関連が多くなるかもしれません。\n本サイトは github pages で運用しています。\nQualifications  そのうち書きます  Work Experience  そのうち書きます  Certificates  Google Cloud 全部(Cloud Architectなど、全部取りました) Kubernetes系(CKA,CKAD) IPAいくつか  Education  そのうち書きます  ","title":"Profile"},{"content":"はじめに 自前でBlogページ作ってみました。一発目の投稿は、このページ作成の経緯とか技術的なちょっとした解説をしていきます。 よろしくお願いいたします。\nprofile ページにも記載していますが、本サイトは以下のような構成で成り立っています。\n Webサイトホスティング  github pages   Webページ作成  Hugo v0.96 (2022.04時点の最新版)   ドメイン取得  freenom 0円でドメイン取得・運用できるなんていい時代ですね。    便利サービス・ツールにすがりまくっているので、自前と堂々と名乗っていいものか、、、というのはありますが。\nなぜブログを始めようと思ったか？ もともとどこかのブログで何かしらアウトプットしよう、と思っていました。僕はインフラエンジニアをやっていてIT技術に触れる機会はよくあったのと、個人的に分散システム全般的に興味があり、社内でちょこちょこ草の根勉強会でプレゼンしたりはしていました。その活動自体はとても良かったと思っていて、技術的なキャッチアップだけではなく、プレゼン能力も大きく向上したのかなと感じています。一方で、ブログ形式で静的に情報を残していく活動も必要なのではないかと感じていました。自分が発表した内容といっても、時間が経てば自分ですら忘れてしまいますしね。\n外部サービスと比較したときのデメリット 今回は自前で作ったのですが、ブログ化のプラットフォームとして社内の情報発信サイトや、Qiita/hatena/Zennなどの外部サービスでもいいのですが、前者はクローズドでもったいないですし、後者はまあありっちゃありなのですが、色々とそれ自体が勉強になるかなと思って自前でやってみました。\nもちろんデメリットはいくつかあると思っていて、以下に並べてみました。\n初期セットアップが面倒、お金がかかる やっぱりこれに尽きますよね。 サーバやドメイン取得など、ブログ運営において全く本質的でないところに時間を掛けたくないのは当然です。 といっても、一昔前と比べるとかなり楽に、かつお安く運用できるようになったのではないでしょうか。\n画像データのデプロイが面倒 Qiitaだとエディタに画像データをペーストすればアップロードされる仕様ですが、Hugo(のようなCLIベースの静的サイトジェネレータ)の場合は基本的に、画像をローカルの作業フォルダ(static)に保存⇒markdown から参照 になります。 これ地味に辛くて、「画像が少なくなりがち」になるの要因です。もしかしたらいいソリューションがあるかもしれません。\nと思ったらやばいソリューション見つけてしまいました。次回試します。\nPaste Image プラグイン(VS Code)\n人に見られにくい これは仕方が無いので、Twitter等のSNSを通じてURLを共有したり、Google検索に引っかかるようにするとよいのでしょう。\nまあデメリットたくさんありますよね。 敢えてメリットは列挙しませんが、上記がどうしても、という方はぜひ既存のブログサービスをお使いください。\nなぜ Hugo にしたか？ 特に理由はありません。他のツール(Gatsbyなど)を触ってみたわけじゃないのでわかりません。 たまたま目に入った、参考にさせて頂いたサイトが Hugo だったので。 結果としては、とても楽でいいツールでした。逆にいうと、Hugo を使っちゃうとブログ環境セットアップを通じてのエンジニア力のアップはのぞめませんのであしからず。笑\nで、どうやってブログ作ったの？ 1. ドメイン取得 あとからでもいいのですが、モチベーション的になんとなく先にドメイン登録してみました。一番世に出る情報ですしね。これ取りたいな、とかわかりやすいものが取れるかな、という点では重要です。今回は、無料ドメインを提供している freenom で登録してみました。\n登録した結果はこんな感じです。 無料の場合は、1年毎に更新が必要です。有料版であれば1年以上更新せずそのまま使えるようです。\n2. ローカル環境で静的ページ作成 Hugo初期セットアップ Hugo 自体のインストールから行います。 Macユーザの方はbrewで良いかと思います。 僕の場合は、バイナリを github からダウンロードしています。パスとかはよしなに。\nHugo インストール後、\nhugo new site blog を打つだけでテンプレが生成されます。こちらのディレクトリ全体をそのままgit pushしていく形になります。 Hugo のテーマは Toha にしました。 こちらも理由はそんなになく、シンプルだからです。\nちなみに僕は Windows を使っており、WSL2環境で作業しています。\nconfig 修正 本家の config を丸パクリしてから、\n publishDir を docs に変更(github pages対策) ドメインを変更 （Google Analytics 導入したい人）googleAnalytics` をやります。  baseURL: \u0026#34;https://a2ito.ml/\u0026#34; canonifyurl: true publishDir: \u0026#34;docs\u0026#34; こんな感じです。\nGoogle Analytics について、古いバージョンでは特別な設定（gtag.js対応のためにカスタムヘッダを埋め込む）が必要だったようですが、今回使ったバージョン v0.96 では不要でした。⇒参考\nprofile ページ作成 まずはページをhugoコマンドで作成します。\nhugo new misc/profile.md hugo new [something]を実行すると something が content フォルダ配下に作られるのですが、以下のようにファイルを管理していこうかなと。\ncontent ├── misc # ここにprofileページなど雑多なもの │ └── profile.md └── posts # ここに投稿を作っていく └── 20220403-post.md 次に作ったprofileページを公開するために、config.yml で以下の設定をしましょう。\nmenu:  main:  - identifier: posts  name: posts  url: /posts  weight: 10  - identifier: profile  name: profile  url: misc/profile  weight: 15 あたりをいじります。\n投稿ページ作成 hugo new posts/20220403-post.md でOKです。言うまでもないですが、ファイル名は適当に読み替えてください。 あとは作られたmdを修正して、がりがりブログを書いていきましょう。\nページ確認、作成 hugo server でローカルでページを確認しつつ、修正が終わったら\nhugo でdocsへ静的ページが作成されることを確認しましょう。\n3. github pages 作成 github 上に適当なリポジトリを作ってください。 最初は、プライベートリポジトリでパブリック公開pagesにしようと思いましたが、フリープランだとそういう選択はできないようです。⇒参考\n作ったリポジトリにごっそりpushしてもらって、docs を公開してください。 これで、以下のようなURLでアクセスできるようになるはずです。\nhttps://[個別のgithub ID].github.io/docs/ 非同期でWeb公開されるようなので、ご注意ください。 deploy状況は、リポジトリトップページの右下 Environments から確認できます。\ngithub pages と独自ドメイン紐づけの話をしようと思いましたが、またの機会に。\nおわりに 今回は以上です。 予想外に長くなってしまいました。\n2022/4/4 追記 本ブログのソースがあるリポジトリを private 化しました。本サイト自体は public なリポジトリで公開していますが、privateリポジトリでテキストを書いて、actions で build 済みのブログ公開データの docs ディレクトリだけ別の pubulic リポジトリに deploy することで実現できました。 そのうち、そのやり方とtemplateを公開したいと思います。\n参考にさせて頂いたサイト https://zenn.dev/okaponta/articles/c302f58507febc https://www.bedroomcomputing.com/2020/08/2020-0815-engineer-static-site-gen-blog/\n","permalink":"https://a2ito.ml/posts/20220403-post/","summary":"はじめに 自前でBlogページ作ってみました。一発目の投稿は、このページ作成の経緯とか技術的なちょっとした解説をしていきます。 よろしくお願いいたします。\nprofile ページにも記載していますが、本サイトは以下のような構成で成り立っています。\n Webサイトホスティング  github pages   Webページ作成  Hugo v0.96 (2022.04時点の最新版)   ドメイン取得  freenom 0円でドメイン取得・運用できるなんていい時代ですね。    便利サービス・ツールにすがりまくっているので、自前と堂々と名乗っていいものか、、、というのはありますが。\nなぜブログを始めようと思ったか？ もともとどこかのブログで何かしらアウトプットしよう、と思っていました。僕はインフラエンジニアをやっていてIT技術に触れる機会はよくあったのと、個人的に分散システム全般的に興味があり、社内でちょこちょこ草の根勉強会でプレゼンしたりはしていました。その活動自体はとても良かったと思っていて、技術的なキャッチアップだけではなく、プレゼン能力も大きく向上したのかなと感じています。一方で、ブログ形式で静的に情報を残していく活動も必要なのではないかと感じていました。自分が発表した内容といっても、時間が経てば自分ですら忘れてしまいますしね。\n外部サービスと比較したときのデメリット 今回は自前で作ったのですが、ブログ化のプラットフォームとして社内の情報発信サイトや、Qiita/hatena/Zennなどの外部サービスでもいいのですが、前者はクローズドでもったいないですし、後者はまあありっちゃありなのですが、色々とそれ自体が勉強になるかなと思って自前でやってみました。\nもちろんデメリットはいくつかあると思っていて、以下に並べてみました。\n初期セットアップが面倒、お金がかかる やっぱりこれに尽きますよね。 サーバやドメイン取得など、ブログ運営において全く本質的でないところに時間を掛けたくないのは当然です。 といっても、一昔前と比べるとかなり楽に、かつお安く運用できるようになったのではないでしょうか。\n画像データのデプロイが面倒 Qiitaだとエディタに画像データをペーストすればアップロードされる仕様ですが、Hugo(のようなCLIベースの静的サイトジェネレータ)の場合は基本的に、画像をローカルの作業フォルダ(static)に保存⇒markdown から参照 になります。 これ地味に辛くて、「画像が少なくなりがち」になるの要因です。もしかしたらいいソリューションがあるかもしれません。\nと思ったらやばいソリューション見つけてしまいました。次回試します。\nPaste Image プラグイン(VS Code)\n人に見られにくい これは仕方が無いので、Twitter等のSNSを通じてURLを共有したり、Google検索に引っかかるようにするとよいのでしょう。\nまあデメリットたくさんありますよね。 敢えてメリットは列挙しませんが、上記がどうしても、という方はぜひ既存のブログサービスをお使いください。\nなぜ Hugo にしたか？ 特に理由はありません。他のツール(Gatsbyなど)を触ってみたわけじゃないのでわかりません。 たまたま目に入った、参考にさせて頂いたサイトが Hugo だったので。 結果としては、とても楽でいいツールでした。逆にいうと、Hugo を使っちゃうとブログ環境セットアップを通じてのエンジニア力のアップはのぞめませんのであしからず。笑\nで、どうやってブログ作ったの？ 1. ドメイン取得 あとからでもいいのですが、モチベーション的になんとなく先にドメイン登録してみました。一番世に出る情報ですしね。これ取りたいな、とかわかりやすいものが取れるかな、という点では重要です。今回は、無料ドメインを提供している freenom で登録してみました。\n登録した結果はこんな感じです。 無料の場合は、1年毎に更新が必要です。有料版であれば1年以上更新せずそのまま使えるようです。\n2. ローカル環境で静的ページ作成 Hugo初期セットアップ Hugo 自体のインストールから行います。 Macユーザの方はbrewで良いかと思います。 僕の場合は、バイナリを github からダウンロードしています。パスとかはよしなに。","title":"自前でBlogサイトを作ってみました"}]